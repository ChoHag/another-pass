#!/bin/bash

########## Folding, and reading this source code.

# There are folding markers throughout this file so that if it is opened in vim
# you should see a few lines of mostly comments. If using the default settings,
# the code within a fold can be seen be navigating to it and typing 'zo'. 'zc'
# will close it again and 'za' toggles between opened and closed.

########## Initialisation

#{{{

# Abort if any failure is not trapped
set -e

# Don't leak.
umask 0077

# Enable debugging if the debug environment variable is set to anything
# other than null or zero.
if [[ -v debug && $debug && $debug != 0 ]]; then
  debug=1
  set -x
else
  unset debug
fi

# Security/Safety
unset audit_log force skip_git quick_sign
commit=step
# Runtime bits and pieces
unset clip echo multiline once headings
# Password
unset absent present parent
unset passdir passname passfile password passdata
length=12
symbols=1
# Keys
unset dest recipients key
# Git
unset push push_dest

# Tempfile handling
unset use_unsafe_tempdir tempdir
unset all_temp_files
tempfile_counter=0
trap 'eval /bin/rm -f $all_temp_files' INT TERM ERR EXIT

#}}}

########## Other useful functions, including audit.

#{{{

# Save an audit trail to $audit_log of each use of the password store. Commit
# if $commit is set to 'audit'.
audit() {
  if [[ -v audit_log ]]; then
    echo "$(date)" ${LOGNAME} "$(hostname -f)" "$@" >>"$audit_log"
  fi
  if [[ $commit == audit ]]; then
    commit_and_push audit
  fi
}

# Initialise git in $passdir.
rc_init() {
  if [[ -e "$passdir"/.git ]]; then return 1; fi
  pushd "$passdir" >/dev/null 2>&1
  git init
  popd >/dev/null 2>&1
}

# Add the files passed as arguments to git's cache.
rc_add_file() {
  if [[ ! -e "$passdir"/.git ]]; then return; fi
  pushd "$passdir" >/dev/null 2>&1
  git add "${@/#"$passdir/"/}"
  popd >/dev/null 2>&1
}

# Delete the files named as arguments from git's cache.
rc_rm_file() {
  if [[ ! -e "$passdir"/.git ]]; then return; fi
  pushd "$passdir" >/dev/null 2>&1
  git rm -f "${@/#"$passdir/"/}"
  popd >/dev/null 2>&1
}

# Commit any changes to git. If $push is set, also push with 'git push'.
commit_and_push() {
  if [[ ! -e "$passdir"/.git ]]; then return; fi
  pushd "$passdir" >/dev/null 2>&1
  if [[ "$(git status --porcelain)" ]]; then
    git commit -a -m "$*"
    if [[ -v push ]]; then
      git push "${push_branch[@]}" ## "$[@]" expands to null if unset
    fi
  fi
  popd >/dev/null 2>&1
}

# Create a temporary file in /dev/shm. If /dev/shm is unavailable and $force is
# not set, ask for confirmation (only the first time the function is called) to
# use /tmp.
internal_tempfile() {
  if [[ -v use_unsafe_tempdir \
        || ! ( -d /dev/shm && -w /dev/shm && -x /dev/shm ) ]]; then
    cat >&2 <<-'MESSAGE'
	Your system does not have a usable /dev/shm, which means that it may be
	difficult to entirely erase the temporary non-encrypted password file
	after editing.
MESSAGE
    if [[ ! -v force ]]; then
      read -r -p "Continue anyway, using global temporary directory? [y/N] " ask
      if [[ ${ask,} != y ]]; then
	return 1
      fi
    else
      echo Continuing because --force. >&2
      audit force-shm
    fi

    use_unsafe_tempdir=1
    tempdir=${TMPDIR:-/tmp}
  else
    tempdir=/dev/shm
  fi

  tempfile=$(mktemp "$tempdir"/tmp.XXXXXXXXXX)
  eval trapped_tempfile_$tempfile_counter=\$tempfile
  c=0
  while [[ $c -le $tempfile_counter ]]; do
    all_temp_files=$all_temp_files' "$trapped_tempfile_'${c}'"'
    ((c+=1))
  done
  ((tempfile_counter++))
  echo "$tempfile"
  return 0
}

# Call GPG.
call_gpg() {
  gpg2 --quiet --yes --batch --no-default-recipient "$@"
}

#}}}

########## Password handling functions.

#{{{

# generate_password()
#   args:     ignored
#   environment in:
#     symbols (bool)
#     length  (integer) (required)
#   environment out:
#     password (SECRET)
#   return:
#     value from external generator.
#
# Uses pwgen to generate a new password and put it in the password variable.
# This should be highly adaptable. Currently it is not even remotely adaptable.
#
generate_password() {
  password=$(pwgen -s ${symbols:+-y} $length 1)
}

# Write the password in $passdata to stdout. With headings if $headings is set.
# Prints the rest of the file also if $1 is --full
write_password() {
  if [[ -v headings ]]; then
    echo -n "$passname: "
  fi

  if [[ -z "$passdata" ]]; then
    passdata=MISSING
  fi

  # Print the password
  echo ${passdata%%$'\n'*}

  # Print the rest
  if [[ $1 == --full && -n "${passdata#*$'\n'}" ]]; then
    echo -n "${passdata#*$'\n'}"
  fi
}

# find_passdir()
#   args:
#     --init  Indicate that pass is initialising (a missing or broken password
#             store is not a problem) and the configuration file should not be
#             parsed.
#   environment in:
#     passdir  The path to the password store specified by the user with the
#              --store-directory (short: --dir) option.
#     skip_git (bool) Whether to look for a .git directory.
#     PASSWORD_STORE_DIR (external)
#              Filesystem location of the password store is. Does not override
#              the option passed on the command-line.
#   environment out:
#     passdir  The path to the password store after location and verification.
#              This directory may not exist, but it is where pass/the user
#              wants/expects it to be.
#   return:
#     0 if the store directory exists in a usable state.
#     1 otherwise
#
# Locates the password store using the following heuristic:
#  1. If the --store-directory option has been used to specify a path on the
#     command-line, use that.
#  2. Otherwise, if PASSWORD_STORE_DIR is set, use that.
#  3. Otherwise, if .password-store exists in $HOME:
#    * If it is a directory, use that.
#    * Otherwise, use its contents (strips blank lines and comments).
#
# Returns immediately in init mode, or verifies the store and reads its config
# file.
#
find_passdir() {
  if [[ ! -v passdir ]]; then
    if [[ -v PASSWORD_STORE_DIR ]]; then
      passdir=$PASSWORD_STORE_DIR
    else
      if [[ -e $HOME/.password-store ]]; then
	if ! [[ -d $HOME/.password-store ]]; then
	  passdir=$(grep -Ev '^[[:space:]]*(#.*)?$' $HOME/.password-store)
	else
	  passdir=$HOME/.password-store
	fi
      fi
    fi
  fi

  if ! [[ -v passdir && -d "$passdir" && -r "$passdir" && -x "$passdir" ]]; then
    return 1
  fi

  # Everything's fine in init mode.
  if [[ $1 == --init ]]; then return; fi

  # Complain & fail
  if [[ ! -v passdir ]]; then
    echo Password directory not found. >&2
    return 1
  fi

  if [[ ! -e "$passdir"/.git && ! ( -v force || -v skip_git ) ]]; then
    echo Password directory is not a git repository. >&2
    return 1
  fi
}

# read_recipients()
#   args:      Name of password to find recipients for.
#   environment in:
#     passdir  (required) Password store location
#     passname (required) Name of the password being saved
#   environment out:
#     recipients (array)
#              List of keys to encrypt $passname to.
#   return:
#     0
#
# Builds a list of the key IDs to pass to gpg by breaking $passname into
# folders and reading the .keyids file in each one. If a folder has a file
# named .keyids-reset then the list of recipients constructed up to that point
# is discarded and a new list begun with.
#
# Blank lines and comments in .keyids are ignored. If the key ID is preceeded
# by a string and a colon, the string is used as a glob to match the password
# name against (with the path fully stripped). If the name does not match, the
# key is not added to the list.
#
# This does _NOT_ append the current user to the list of recipients.
#
read_recipients() {
  unset recipients
  local passname=$1
  oIFS=$IFS
  IFS=/
  dirs=(${passname%/*})
  IFS=$oIFS
  unset append
  for dir in '' "${dirs[@]}"; do
    if [[ -e $passdir/$append/$dir/.keyids-reset ]]; then
      unset recipients
    fi
    if [[ -e $passdir/$append/$dir/.keyids ]]; then
      while read line; do
	if [[ $line =~ ^[$' \t']*(#.*)?$ ]]; then
	  continue
	fi
	if [[ $line =~ ^[$' \t']*([^$' \t']):[$' \t']+ ]]; then
	  match=${BASH_REMATCH[1]}
	  new_key=${line#${BASH_REMATCH[0]}}
	else
	  match='*'
	  new_key=$line
	fi
	if [[ ${passname##*/} = $match ]]; then # Treats $match as a glob
	  recipients=("${recipients[@]}" "$new_key")
	fi
      done < $passdir/$append/$dir/.keyids
    fi
  done
}

# scan_passdir()
#   args: Optional '--<failure type>' followed by 1 or more password names.
#   environment in:
#     passdir (required) Password store location
#   environment out:
#     absent  (array) List of password names which are missing.
#     present (array) List of password names which exist.
#     parent  (array) List of password names whose parent directory doesn't exist.
#   return:
#     If the array named by failure type, or the absent array if none is
#     specified, contains 1 or more entries, return 1. Otherwise return 0.
#
# The main purpose of this function is to allow all passwords named on the
# command-line to be checked for existence before trying to view/replace/etc.
# any one of them.
#
scan_passdir() {
  unset absent
  unset present
  unset parent
  unset also_dir

  if [[ $1 =~ ^--(absent|present|parent|dir) ]]; then
    if [[ ${BASH_REMATCH[1]} == dir ]]; then
      which=absent
      also_dir=1
    else
      which=$1
    fi
    shift
  else
    which=absent
  fi

  for passname in "$@"; do
    if [[ $passname =~ / ]]; then
      pass_parent=${passname%/*}
    else
      unset pass_parent
    fi
    if [[ -e "$passdir/$passname.gpg" || -e "$passdir/$passname.asc" \
          || ( -v also_dir && -e "$passdir/$pass_parent" ) ]]; then
      present+=("$passname")
    else
      absent+=("$passname")
      if ! [[ -d "$passdir/$pass_parent" ]]; then
	parent+=("$passname")
      fi
    fi
  done

  if eval [[ \${\#$which[@]} -ne 0 ]]; then
    return 1
  else
    return 0
  fi
}

# locate_passfile()
#   args:
#     Name of password to locate
#   environment in:
#     passdir  (required) Password store location
#   environment out:
#     passfile Full path to located password file.
#     passdata MISSING or CONFUSED if there was a problem, or null.
#   return:
#     0 Success
#     1 Password file not found, or found too many
#
# Locate the encrypted file containing password data. If it is not clear which
# file to use, passdata will be set to CONFUSED, if the file does not exist,
# passdata will be set to MISSING. Otherwise passdata will be unset and
# passfile will contain the path to the encrypted file.
#
locate_passfile() {
  unset passfile

  # Check for multiple files
  if [[ -e "$passdir/$1.gpg" && -e "$passdir/$1.asc" ]]; then
    echo .gpg and .asc file found. Confused. >&2
    audit locate-confused "$1"
    passdata=CONFUSED
    return 1
  fi

  # Locate the actual file
  if [[ -e "$passdir/$1.gpg" ]]; then
    passfile=$passdir/$1.gpg
    unset passdata
    return 0
  elif [[ -e "$passdir/$1.asc" ]]; then
    passfile=$passdir/$1.asc
    unset passdata
    return 0
  else
    passdata=MISSING
    return 1
  fi
}

# read_passfile()
#   args:
#     Name of password to read.
#   environment in:
#     passdir  (required) Password store location
#   environment out:
#     passdata (SECRET) Unencrypted password data
#   return:
#     0 Success
#     1 Password unreadable or missing
#
# Locate the encrypted file using locate_passfile and set passdata to its
# unencrypted contents.
#
read_passfile() {
  if ! locate_passfile "$1"; then
    audit read-missing "$1"
    return 1
  elif [[ -d "$passfile" || ! -r "$passfile" ]]; then
    echo "$1" is unreadable or is a directory. >&2
    audit unreadable "$1"
    passdata=UNREADABLE
    return 1
  fi

  # Decrypt into passdata
  audit read "$1"
  passdata=$(call_gpg -d "$passfile")$'\n'
}

# save_passfile()
#   args:
#     Name of password to save.
#   environment in:
#     passfile (required) Password file path
#     passdata (SECRET) Unencrypted password data
#   environment out:
#     None
#   return:
#     0 Success
#
# Save the data in $passdata to the file in $passfile encrypted to the list of
# recipients for the named password.
#
# Does *NOT* clear passdata.
#
save_passfile() {
  read_recipients "$1"
  unset gpg_args
  for r in "${recipients[@]}" "${dest[@]}"; do
    gpg_args=("${gpg_args[@]}" -r "$r")
  done
  audit save "$1" to "${recipients[@]}" "${dest[@]}"
  echo -n "$passdata" | call_gpg -e "${gpg_args[@]}" -o "$passfile"
  rc_add_file "$passfile"
}

# sign_passfile()
#   args:
#     Name of password to sign.
#   environment in:
#     passfile (required) Password file path
#     key      The key to sign with.
#   environment out:
#     None
#   return:
#     0 Success
#     1 $key is not set and gpg does not have a default.
#
# Sign the file in $passfile.
#
sign_passfile() {
  if [[ -v key ]]; then
    key=$(call_gpg --list-secret-keys --with-colons | head -n1 | cut -d: -f5)
    if [[ -z "$key" ]]; then
      echo No signing key. >&2
      return 1
    fi
  fi

  call_gpg --detach-sign "$passfile" -o "$passfile".sig."$key"
  rc_add_file "$passfile".sig."$key"
  audit sign "$passfile"
}

#}}}

########## 'Exposed' functions.

#{{{

# init()
#   args:
#     (Optional) Directory to initialise.
#   environment in:
#     passdir  Used by find_passdir
#   environment out:
#     None
#   return:
#     0 Success
#     1 No location given or found.
#     2 Directory already exists (ignored if $force).
#     3 Directory is already a git directory (Not checked if $skip_git, ignored
#       if $force)
#
# Create the directory given in the argument, or the directory found using
# find_passdir()s heuristic, and initialise git if skip_git is not set.
#
init_store() {
  if [[ $# == 0 ]]; then
    ## Try and find the default passdir
    find_passdir --init
    if [[ ! -v passdir ]]; then
      echo "Don't" know where to create password store. >&2
      return 1
    fi
  else
    passdir=${1:-$HOME/.password-store}
    if [[ -e "$passdir" ]]; then
      echo "$passdir" already exists. >&2
      if [[ ! -v force ]]; then
	return 2
      fi
      echo Continuing because --force. >&2
    fi
  fi

  mkdir ${force:+-p} "$passdir"

  if [[ ! -v skip_git ]]; then
    if [[ -e "$passdir"/.git ]]; then
      echo "$passdir" is already a git repository.
      if [[ ! -v force ]]; then
	return 3
      fi
      echo Continuing because --force. >&2
    fi
    rc_init
  fi
}

# get_password()
#   args:
#     (Optional, must be first) -1 - Only display the first line (the password).
#     1 or more passwords to get.
#   environment in:
#     passdir  Used by find_passdir
#     headings Print a header and footer (or a prefix if only displaying the
#              password) for each password named.
#     clip     Copy the (?) password to the clipboard (UNIMPLEMENTED).
#   environment out:
#     None
#   return:
#     0 Success
#     1 Password[s] not found.
#
# Decrypt each password file named and display it to stdout. If the first
# argument is -1, display only the first line, which should contain just the
# password. If the password file is not present and force is enabled,
# 'MISSING' is written out instead. If that's also your password then you've
# already lost.
#
# If headings are enabled, the output is ostensably more human readable, but
# when displaying the whole file the header and footer used are YAML document
# markers, so it is also more easily machine-readable too.
#
# Copying the password to the clipboard is unimplemented and I'm not sure what
# to do about multiple passwords anyway.
get_password() {
  find_passdir

  wholefile=1
  if [[ $1 = "-1" ]]; then
    unset wholefile
    shift
  fi

  if ! scan_passdir "$@"; then
    if [[ ! -v force ]]; then
      audit get-fail "$@"
      echo "Password[s] not found:" "${missing[@]}"
      return 1
    fi
  fi

  for passname in "$@"; do
    read_passfile "$passname" || true

    write_password ${wholefile:+--full}

    if [[ -v clip ]]; then
      : # TODO: clipboard
    fi

    # Lose unencrypted data ASAP
    unset passdata

    if [[ -v wholefile && -v headings ]]; then
      echo ---
    fi
  done
}

# list_password_tree()
#   args:
#     (Optional) Directories to list.
#   environment in:
#     passdir  Used by find_passdir
#   environment out:
#     None
#   return:
#     0 Success
#     1 Directories not found.
#
# List all the passwords (*.gpg and *.asc) with the given name, and use tree(1)
# to recursively list the files and folders under it.
#
# With $headings set, each named password is surrounded with a header and
# footer. Missing folders are ignored if $force is set.
#
list_password_tree() {
  find_passdir

  #####
  if [[ "$*" != . ]] && ! scan_passdir --dir "$@"; then
    if [[ ! -v force ]]; then
      audit list-fail "$@"
      echo "Password[s] or directories not found:" "${missing[@]}" "${parent[@]}"
      return 1
    fi
  fi

  for passname in "$@"; do
    if [[ -v headings ]]; then
      if [[ $passname = . ]]; then
	echo STORE:
      else
	echo $passname:
      fi
    fi
    if [[ -e "$passdir/$passname" ]]; then
      audit list "$passname"
      passtree=$(tree --noreport "$passdir/$passname" | tail -n+2)
      if [[ "$passtree" ]]; then
	echo "$passtree"
      else
	echo '  <empty>'
      fi
    fi
    if [[ -e "$passdir/$passname.gpg" ]]; then
      audit list "$1".gpg
      echo "$passname.gpg"
    fi
    if [[ -e "$passdir/$passname.asc" ]]; then
      audit list "$1".asc
      echo "$passname.asc"
    fi
    if [[ -v headings ]]; then
      echo
    fi

    if [[ $commit == step ]]; then
      commit_and_push list-tree "$passname"
    fi
  done
}

# insert_password()
#   args:
#     (Optional, must be first) --generate - Use generate_password() to create
#               new passwords rather then asking on stdin.
#     1 or more passwords to create.
#   environment in:
#     passdir  Used by find_passdir
#     echo     Echo the password to stdout.
#     multiline Read a complete password file at a time.
#     once     Read the password only once (ie. don't ask to repeat the password).
#   environment out:
#     None
#   return:
#     0 Success
#     1 Passwords already exist.
#
# Create a new password file for each named password. generate_password() is
# called to set $password if --generate is passed, otherwise the user is asked
# for a password on stdin.
#
# Existing passwords are overwritten if force is set.
#
# $echo is disabled by default. This is the only measure taken to protect the
# requested password while in transit. If $echo is set then nothing is done.
#
# Passwords are not asked to be repeated if $once is set.
#
# Alternatively if $multiline is set, $echo and $once are ignored and a
# complete file is read from stdin. When entering multiple passwords, each file
# should be terminated by a lone dot (.). EOF (^D) also works but this closes
# stdin and no more password files can be read.
#
# Generated passwords are not yet written to stdout.
#
insert_password() {
  find_passdir

  if [[ $1 == "--generate" ]]; then
    source=gen
    shift
  else
    source=ask
  fi

  # Check for existing files and create missing directories
  scan_passdir "$@" || true
  if [[ ${#present[@]} -ne 0 ]]; then
    if [[ ! -v force ]]; then
      audit insert-fail "$@"
      echo "Passwords exist:" "${present[@]}" >&2
      return 1
    fi
  fi

  # Just make them now. Git can take care of any mess.
  if [[ ${#parent[@]} -ne 0 ]]; then
    mkdir -p "$passdir"/"${parent[@]%/*}"
  fi

  for passname in "$@"; do
    # If the file exists, skip it.
    if locate_passfile "$passname"; then
      unset new
    else
      new=1
      passfile=$passdir/$passname.gpg
    fi

    audit insert "$passname"

    if [[ $source == "gen" ]]; then
      # Use generate_password and finish with passdata set to the full file
      # contents and password unset.
      generate_password
      passdata=$password$'\n'
      unset password

    else
      if [[ -v multiline ]]; then
	# Read stdin up to . or EOF
	echo "Enter contents of $passname. Finish with '.':"
	unset passdata eof
	while read -r ${echo:+-s} line || eof=1; do
	  if [[ $eof == 1 || "$line" == "." ]]; then
	    break
	  else
	    passdata=$passdata$line$'\n'
	  fi
	done

      else
	# Password reading shenanegans.
	unset password
	password_repeat="UNCHECKED"
	while [[ "$password" != "$password_repeat" ]]; do
	  read -r ${echo:--s} -p "Enter password for $passname: " password
	  if [[ ! -v echo ]]; then echo; fi
	  if [[ -v once ]]; then
	    password_repeat=$password
	  else
	    read -r ${echo:--s} -p "Repeat password for $passname: " password_repeat
	    if [[ ! -v echo ]]; then echo; fi
	  fi
	  if [[ "$password" != "$password_repeat" ]]; then
	    echo Passwords do not match. >&2
	  fi
	done
	passdata=$password$'\n'
	unset password password_repeat
      fi
    fi

    if [[ $source == gen && -v echo ]]; then
      write_password
    fi

    save_passfile

    # Lose unencrypted data ASAP
    unset passdata

    if [[ $commit == step ]]; then
      commit_and_push insert-password $source "$passname"
    fi

    # Just give up if we don't have stdin any more.
    if [[ -v multiline && -v eof ]]; then
      break
    fi
  done
}

# edit_password()
#   args:
#     1 or more passwords to edit
#   environment in:
#     passdir  Used by find_passdir
#     VISUAL/EDITOR
#              The editor to use. $VISUAL or $EDITOR or vi.
#   environment out:
#     None
#   return:
#     0 Success
#     1 Passwords not found.
#
# Decrypt each password file to safe temporary storage and open it in an
# editor. A diff is displayed for verification before encrypting and saving.
#
# If $force is set, password files which don't exist are created.
#
edit_password() {
  find_passdir

  if ! scan_passdir "$@"; then
    if [[ ! -v force ]]; then
      audit edit-fail "$@"
      echo "Password[s] not found:" "${missing[@]}"
      return 1
    fi
  fi

  for passname in "$@"; do
    # Read the password data if it exists.
    passorig=$(internal_tempfile)
    if ! read_passfile "$passname"; then
      new=1
      passfile=$passdir/$passname.gpg
    else
      unset new
      echo -n "$passdata" >"$passorig"
    fi

    # Lose unencrypted data ASAP
    unset passdata

    audit edit${new:--new} "$passname"

    # Edit the file until satisfied.
    accept=r
    passtmp=$(internal_tempfile)
    while [[ ${accept,} != y ]]; do
      if [[ ${accept,} == r ]]; then
	cat "$passorig" >"$passtmp"
      fi
      ${VISUAL:-${EDITOR:-vi}} "$passtmp"
      if diff -u "$passorig" "$passtmp"; then
	echo '  <no change>'
      fi
      if ! read -r -p "Accept? [Y=yes,n=no/edit,r=restart,a=abort] " accept; then
	accept=a
      fi
      if [[ -z "$accept" ]]; then
	accept=y
      fi
      if [[ ${accept,} == a ]]; then
	return 1
      fi
    done
    passdata=$(cat "$passtmp")
    rm -f "$passtmp"
    if [[ ! -v new ]]; then
      rm -f "$passorig"
    fi

    save_passfile

    if [[ $commit == step ]]; then
      commit_and_push edit "$passname"
    fi
  done
}

# delete_password()
#   args:
#     1 or more passwords to delete.
#   environment in:
#     passdir  Used by find_passdir
#   environment out:
#     None
#   return:
#     0 Success
#     1 Passwords not found.
#
# Delete the specified passwords. Unless $force is enabled, will return an
# error if 1 or more passwords does not exist.
#
delete_password() {
  find_passdir

  if ! scan_passdir "$@"; then
    if [[ ! -v force ]]; then
      audit delete-fail "$@"
      echo "Password[s] not found:" "${missing[@]}"
      return 1
    fi
  fi

  for passname in "$@"; do
    if ! locate_passfile "$passname"; then
      audit delete-missing "$passname"
      continue
    fi

    audit delete "$passname"
    rm -f "$passfile"
    rc_rm_file "$passfile"

    if [[ $commit == step ]]; then
      commit_and_push delete "$passname"
    fi
  done
}

# verify_password()
#   args:
#     1 or more passwords to verify & sign.
#   environment in:
#     passdir  Used by find_passdir
#   environment out:
#     None
#   return:
#     0 Success
#     1 Passwords not found.
#
# Decrypt the password file and display on stdout. Ask for confirmation and
# sign the encrypted file. Aborts if 1 or more password files is missing and
# $force is not set.
#
# Skips the display and verification if $quick_sign is set.
#
verify_password() {
  find_passdir

  # Check for existing files and create missing directories
  if ! scan_passdir "$@"; then
    if [[ ! -v force ]]; then
      audit verify-fail "$@"
      echo "Password[s] not found:" "${missing[@]}"
      return 1
    fi
  fi

  for passname in "$@"; do
    if ! locate_passfile "$passname"; then
      audit verify-missing "$passname"
      continue
    fi

    audit verify "$passname"

    if [[ ! -v quick_sign ]]; then
      read_passfile "$passname"
      echo -n "$passdata"
      # Lose unencrypted data ASAP
      unset passdata
      if ! read -r -p "OK? [N/y] " ok; then
	ok=n
      fi
      if [[ ${ok,} != y ]]; then
	if [[ -v force ]]; then
	  continue
	else
	  break
	fi
      fi
    fi

    sign_passfile # includes audit

    if [[ $commit == step ]]; then
      commit_and_push verify "$passname"
    fi
  done
}

#}}}

########## Command-line handling.

#{{{

# Usage statement. Exits with return code $1 if (and only if) the argument is
# passed.
usage() {
  cat <<USAGE
  Options:
    -a|--audit =?
      Location of audit log

    -c|--clip
      Copy password to clipboard (unimplemented)

    --commit =?
      When to commit to git - audit, step, end or none

    -d|--dest|--destination =?
      Additional encryption destinations. May be specified multiple times.

    -e|--echo
      Echo password to the terminal (ie. do not disable terminal echo during
      password entry).

    -f|--force
      Continue despite problems

    -g|--skip-git
      Do not use or attempt to use git.

    -H|--headings
      Print multiple passwords etc. with headings.

    -h|--help
      Don't panic!

    -k|--key =?
      Can't remember

    -l|--length =?
      Length of password to generate.

    -m|--multiline
      Input multiline passwords.

    -n|--no-symbols
      Generate passwords without symbols.

    -p|--push
      Push after commit.

    -P|--push-dest|--push-destination =?
      Location to push to.

    -Q|--quick-sign
      Sign without verification.

    -s|--dir|--store-directory =?
      Location of password directory. Overrides PASSWORD_STORE_DIR and
      ~/.password-store
USAGE
  if [[ $# -eq 1 ]]; then
    exit $1
  fi
}

set +e
short_opt="a:cd:efgHhk:l:mnpP:Qs:"
long_opt=(
  audit: clip commit dest: destination: echo force skip-git headings help key:
  length: multiline no-symbols push push-dest: push-destination: quick-sign
  dir: store-directory:
)
opt=$(getopt -q -o "$short_opt" "${long_opt[@]/#/--long=}" -- "$@")
if [[ $? != 0 ]]; then
  usage 1
fi
set -e
eval set -- $opt

while true; do
  case "$1" in
    -a|--audit)
      audit_log=$2
      shift; shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -c|--clip)
      clip=1
      shift
      ;;
    --commit)
      if [[ ${2,,} =~ ^(none|audit|step|end)$ ]]; then
        commit=${2,,}
      else
        echo Invalid commit type: "${2,,}". Valid options: none, audit, step, end. >&2
        exit 1
      fi
      shift; shift
      ;;
    -d|--dest|--destination)
      dest=("${dest[@]}" "$2")
      shift; shift
      ;;
    -e|--echo)
      echo=1
      shift
      ;;
    -f|--force)
      force=1
      shift
      ;;
    -g|--skip-git)
      skip_git=1
      shift
      ;;
    -H|--headings)
      headings=1
      shift
      ;;
    -k|--key)
      key=$2
      shift; shift
      ;;
    -l|--length)
      length=$2
      shift; shift
      ;;
    -s|--dir|--store-directory)
      passdir=$2
      shift; shift
      ;;
    -m|--multiline)
      multiline=1
      shift
      ;;
    -n|--no-symbols)
      unset symbols
      shift
      ;;
    -p|--push)
      push=1
      shift
      ;;
    -P|--push-dest|--push-destination)
      push_destination=$2
      shift; shift
      ;;
    -Q|--quick-sign)
      quick_sign=1
      shift
      ;;
    --) shift; break ;;
    *)  break ;;
  esac
done

# Determine the procedure name

proc=$(basename "$0")
if [[ $proc != pass ]]; then
  proc=${proc#pass-}
else
  if [[ $# -eq 0 ]]; then
    echo No procedure was specified. >&2
    exit 1
  fi
  proc=$1
  shift
fi

case "$proc" in
  init)
    # Create a directory and run git init.
    if [[ $# -ge 2 ]]; then
      echo "Syntax: pass init [<directory>]" >&2
      exit 1
    fi
    init_store "$1"
    ;;
  get)
    # Print each password (first line of file) one at a time.
    # Each line is preceded with '<password-name>: ' if headings are enabled.
    if [[ $# == 0 ]]; then
      echo "Syntax: pass get <password-name>..." >&2
      exit 1
    fi
    get_password -1 "$@"
    ;;
  show)
    # Display the entire password file.
    # With headings enabled, the first line has '<password-name>: ' prepended.
    # Each file is seperated with '---' if multiple are requested.
    if [[ $# == 0 ]]; then
      echo "Syntax: pass show <password-name>..." >&2
      exit 1
    fi
    get_password "$@"
    ;;
  ls|list)
    # List the passwords available under the location specified.
    # With headings enabled, each tree is preceeded with '<password-name>:' and
    # terminated with a blank line.
    list_password_tree "${@:-.}"
    ;;
  insert)
    # Insert new passwords by requesting each one on stdin.
    if [[ $# == 0 ]]; then
      echo "Syntax: pass insert <password-name>..." >&2
      exit 1
    fi
    insert_password "$@"
    ;;
  edit)
    # Edit the specified password[s] in $EDITOR
    if [[ $# == 0 ]]; then
      echo "Syntax: pass edit <password-name>..." >&2
      exit 1
    fi
    edit_password "$@"
    ;;
  gen|generate)
    # Generate a new password, optionally using the specified generator, then
    # (overridable) get() it.
    if [[ $# == 0 ]]; then
      echo "Syntax: pass generate <password-name>..." >&2
      exit 1
    fi
    insert_password --generate "$@"
    ;;
  sign|verify)
    # Sign an encrypted signature file.
    if [[ $# == 0 ]]; then
      echo "Syntax: pass sign <password-name>..." >&2
      exit 1
    fi
    verify_password "$@"
    ;;
  rm|delete)
    # Delete the specified password[s]
    if [[ $# == 0 ]]; then
      echo "Syntax: pass delete <password-name>..." >&2
      exit 1
    fi
    delete_password "$@"
    ;;
esac

#}}}

# vim: set ft=sh fdm=marker:
